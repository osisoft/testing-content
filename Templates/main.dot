{{= data.tags.section }}

{{ for (var r in data.resources) { }}
{{ data.resource = data.resources[r]; }}

{{= data.tags.section }}
<h1 id="{{=data.title_prefix+'-'+data.utils.slugify(r)}}">{{= r}}</h1>
{{ var tag = data.utils.getTag(r); }}

{{ for (var s in data.components.schemas) { }}
{{? tag.includes(s) || tag == s}}

{{ var origSchema = data.components.schemas[s]; }}
{{ var enums = []; }}
{{ var blocks = data.utils.schemaToArray(origSchema,-1,{trim:true,join:true},data); }}

{{~ blocks :block}}
{{? block.title }}{{= block.title}}{{= '\n\n'}}{{?}}

{{ var filteredProperties = data.utils.getFilteredProperties(block, data); }}
{{? filteredProperties.length}}

{{? filteredProperties.length}}|Name|Type|Description|
|---|---|---|{{?}}
{{~ filteredProperties :p}}|{{=p.displayName}}|{{? p.format}}{{=p.format}}{{??}}{{=p.safeType}}{{?}}|{{=p.description||'None'}}|
{{~}}

{{?}}
{{~}}

{{?}}	
{{ } /* of schemas */ }}

{{? data.resource.description }}{{= data.resource.description}}{{?}}

{{? data.resource.externalDocs}}
<a href="{{=data.resource.externalDocs.url}}">{{=data.resource.externalDocs.description||'External documentation'}}</a>
{{?}}

{{ for (var m in data.resource.methods) { }}
{{ data.operationUniqueName = m; }}
{{ data.method = data.resource.methods[m]; }}
{{ data.operationUniqueSlug = data.method.slug; }}
{{ data.operation = data.method.operation; }}
---
## {{= data.utils.getMethodName(m)}}
{{= data.templates.operation(data, r) }}
{{ } /* of methods */ }}

{{= data.tags.endSection }}
{{ } /* of resources */ }}

{{? data.api.components && data.api.components.schemas }}
{{= data.tags.section }}

# Definitions

{{ for (var s in data.components.schemas) { }}
{{ var origSchema = data.components.schemas[s]; }}
{{ var schema = data.api.components.schemas[s]; }}

{{= data.tags.section }}
<h2 id="tocS_{{=s}}">{{=s}}</h2>
{{ /* backwards compatibility */ }}
<a id="schema{{=s.toLowerCase()}}"></a>
<a id="schema_{{=s}}"></a>
<a id="tocS{{=s.toLowerCase()}}"></a>
<a id="tocs{{=s.toLowerCase()}}"></a>

{{? origSchema.type === 'object' }}
{{? data.options.yaml }}
```yaml
{{=data.utils.yaml.stringify(data.utils.getSample(schema,data.options,{quiet:true},data.api))}}
{{??}}
```json
{{=data.utils.safejson(data.utils.getSample(schema,data.options,{quiet:true},data.api),null,2)}}
{{?}}
```
{{?}}

{{ var enums = []; }}
{{ var blocks = data.utils.schemaToArray(origSchema,-1,{trim:true,join:true},data); }}
{{ for (var block of blocks) {
     for (var p of block.rows) {
       if (p.schema && p.schema.enum) {
		if(p.schema['x-enumNames']){
			var val = 0;
			for (var e of p.schema.enum) {
				enums.push({name:p.schema['x-enumNames'][val],value:e});
				val++;
			}
		}else{
			for (var e of p.schema.enum) {
				enums.push({name:p.name,value:e});
			}
		}		
       }
     }
   }
}}

{{~ blocks :block}}
{{? block.title }}{{= block.title}}{{= '\n\n'}}{{?}}
{{? block.externalDocs}}
<a href="{{=block.externalDocs.url}}">{{=block.externalDocs.description||'External documentation'}}</a>
{{?}}

{{ var filteredProperties = data.utils.getFilteredProperties(block, data); }}
{{? filteredProperties.length}}

{{? block===blocks[0] }}
{{= data.tags.section }}

### Properties
{{?}}

{{? filteredProperties.length}}|Name|Type|Required|Nullable|Description|
|---|---|---|---|---|{{?}}
{{~ filteredProperties :p}}|{{=p.displayName}}|{{? p.format}}{{=p.format}}{{??}}{{=p.safeType}}{{?}}|{{=p.required}}|{{=p.nullable||'false'}}|{{=p.description||'None'}}|
{{~}}

{{?}}
{{~}}

{{? enums.length > 0 }}
{{= data.tags.section }}

#### Enumerated Values

|Property|Value|
|---|---|
{{~ enums :e}}|{{=e.name}}|{{=data.utils.toPrimitive(e.value)}}|
{{~}}

{{= data.tags.endSection }}
{{?}}

{{= data.tags.endSection }}
{{= data.tags.endSection }}

{{ } /* of schemas */ }}
{{= data.tags.endSection }}
{{?}}
{{= data.tags.endSection }}

